{"version":3,"file":"bundle.js","sources":["node_modules/svelte/internal/index.mjs","src/license.js","src/App.svelte","src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (!store || typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(component, store, callback) {\n    const unsub = store.subscribe(callback);\n    component.$$.on_destroy.push(unsub.unsubscribe\n        ? () => unsub.unsubscribe()\n        : unsub);\n}\nfunction create_slot(definition, ctx, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))\n        : ctx.$$scope.ctx;\n}\nfunction get_slot_changes(definition, ctx, changed, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))\n        : ctx.$$scope.changed || {};\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? requestAnimationFrame : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nlet running = false;\nfunction run_tasks() {\n    tasks.forEach(task => {\n        if (!task[0](now())) {\n            tasks.delete(task);\n            task[1]();\n        }\n    });\n    running = tasks.size > 0;\n    if (running)\n        raf(run_tasks);\n}\nfunction clear_loops() {\n    // for testing...\n    tasks.forEach(task => tasks.delete(task));\n    running = false;\n}\nfunction loop(fn) {\n    let task;\n    if (!running) {\n        running = true;\n        raf(run_tasks);\n    }\n    return {\n        promise: new Promise(fulfil => {\n            tasks.add(task = [fn, fulfil]);\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction detach_between(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction detach_before(after) {\n    while (after.previousSibling) {\n        after.parentNode.removeChild(after.previousSibling);\n    }\n}\nfunction detach_after(before) {\n    while (before.nextSibling) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction object_without_properties(obj, exclude) {\n    // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion\n    const target = {};\n    for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    for (const key in attributes) {\n        if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key in node) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            for (let j = 0; j < node.attributes.length; j += 1) {\n                const attribute = node.attributes[j];\n                if (!attributes[attribute.name])\n                    node.removeAttribute(attribute.name);\n            }\n            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value) {\n    node.style.setProperty(key, value);\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.type = 'text/html';\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now$$1 => {\n        if (!started && now$$1 >= start_time) {\n            started = true;\n        }\n        if (started && now$$1 >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now$$1 - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_render.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_render.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = current_component;\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_binding_callback(fn) {\n    binding_callbacks.push(fn);\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nfunction flush() {\n    const seen_callbacks = new Set();\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.shift()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        while (render_callbacks.length) {\n            const callback = render_callbacks.pop();\n            if (!seen_callbacks.has(callback)) {\n                callback();\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n            }\n        }\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n}\nfunction update($$) {\n    if ($$.fragment) {\n        $$.update($$.dirty);\n        run_all($$.before_render);\n        $$.fragment.p($$.dirty, $$.ctx);\n        $$.dirty = null;\n        $$.after_render.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nlet outros;\nfunction group_outros() {\n    outros = {\n        remaining: 0,\n        callbacks: []\n    };\n}\nfunction check_outros() {\n    if (!outros.remaining) {\n        run_all(outros.callbacks);\n    }\n}\nfunction on_outro(callback) {\n    outros.callbacks.push(callback);\n}\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick$$1(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.remaining += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.remaining) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.callbacks);\n                    }\n                    return false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.remaining += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick$$1(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now$$1 => {\n                if (pending_program && now$$1 > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now$$1 >= running_program.end) {\n                        tick$$1(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.remaining)\n                                    run_all(running_program.group.callbacks);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now$$1 >= running_program.start) {\n                        const p = now$$1 - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick$$1(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = key && { [key]: value };\n        const child_ctx = assign(assign({}, info.ctx), info.resolved);\n        const block = type && (info.current = type)(child_ctx);\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        on_outro(() => {\n                            block.d(1);\n                            info.blocks[i] = null;\n                        });\n                        block.o(1);\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            if (block.i)\n                block.i(1);\n            block.m(info.mount(), info.anchor);\n            flush();\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n    }\n    if (is_promise(promise)) {\n        promise.then(value => {\n            update(info.then, 1, info.value, value);\n        }, error => {\n            update(info.catch, 2, info.error, error);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = { [info.value]: promise };\n    }\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    on_outro(() => {\n        destroy_block(block, lookup);\n    });\n    block.o(1);\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(changed, child_ctx);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        if (block.i)\n            block.i(1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction measure(blocks) {\n    const rects = {};\n    let i = blocks.length;\n    while (i--)\n        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();\n    return rects;\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args) {\n    const attributes = Object.assign({}, ...args);\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === undefined)\n            return;\n        if (value === true)\n            str += \" \" + name;\n        const escaped = String(value)\n            .replace(/\"/g, '&#34;')\n            .replace(/'/g, '&#39;');\n        str += \" \" + name + \"=\" + JSON.stringify(escaped);\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_render: [],\n            after_render: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.head\n            };\n        },\n        $$render\n    };\n}\nfunction get_store_value(store) {\n    let value;\n    store.subscribe(_ => value = _)();\n    return value;\n}\n\nfunction bind(component, name, callback) {\n    if (component.$$.props.indexOf(name) === -1)\n        return;\n    component.$$.bound[name] = callback;\n    callback(component.$$.ctx[name]);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_render } = component.$$;\n    fragment.m(target, anchor);\n    // onMount happens after the initial afterUpdate. Because\n    // afterUpdate callbacks happen in reverse order (inner first)\n    // we schedule onMount callbacks before afterUpdate callbacks\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_render.forEach(add_render_callback);\n}\nfunction destroy(component, detaching) {\n    if (component.$$) {\n        run_all(component.$$.on_destroy);\n        component.$$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        component.$$.on_destroy = component.$$.fragment = null;\n        component.$$.ctx = {};\n    }\n}\nfunction make_dirty(component, key) {\n    if (!component.$$.dirty) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty = blank_object();\n    }\n    component.$$.dirty[key] = true;\n}\nfunction init(component, options, instance, create_fragment, not_equal$$1, prop_names) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const props = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props: prop_names,\n        update: noop,\n        not_equal: not_equal$$1,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_render: [],\n        after_render: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty: null\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, props, (key, value) => {\n            if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {\n                if ($$.bound[key])\n                    $$.bound[key](value);\n                if (ready)\n                    make_dirty(component, key);\n            }\n        })\n        : props;\n    $$.update();\n    ready = true;\n    run_all($$.before_render);\n    $$.fragment = create_fragment($$.ctx);\n    if (options.target) {\n        if (options.hydrate) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.l(children(options.target));\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment.c();\n        }\n        if (options.intro && component.$$.fragment.i)\n            component.$$.fragment.i();\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement !== 'undefined') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr$$1, _oldValue, newValue) {\n            this[attr$$1] = newValue;\n        }\n        $destroy() {\n            destroy(this, true);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy(this, true);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\n\nexport { create_animation, fix_position, add_transform, handle_promise, append, insert, detach, detach_between, detach_before, detach_after, destroy_each, element, object_without_properties, svg_element, text, space, empty, listen, prevent_default, stop_propagation, attr, set_attributes, set_custom_element_data, xlink_attr, get_binding_group_value, to_number, time_ranges_to_array, children, claim_element, claim_text, set_data, set_input_type, set_style, select_option, select_options, select_value, select_multiple_value, add_resize_listener, toggle_class, custom_event, destroy_block, outro_and_destroy_block, fix_and_destroy_block, fix_and_outro_and_destroy_block, update_keyed_each, measure, current_component, set_current_component, beforeUpdate, onMount, afterUpdate, onDestroy, createEventDispatcher, setContext, getContext, bubble, clear_loops, loop, dirty_components, intros, schedule_update, tick, add_binding_callback, add_render_callback, add_flush_callback, flush, get_spread_update, invalid_attribute_name_character, spread, escaped, escape, each, missing_component, validate_component, debug, create_ssr_component, get_store_value, group_outros, check_outros, on_outro, create_in_transition, create_out_transition, create_bidirectional_transition, noop, identity, assign, is_promise, add_location, run, blank_object, run_all, is_function, safe_not_equal, not_equal, validate_store, subscribe, create_slot, get_slot_context, get_slot_changes, exclude_internal_props, once, now, raf, set_now, set_raf, bind, mount_component, init, SvelteElement, SvelteComponent, SvelteComponentDev };\n","const LENGTH = 78;\n\nconst TEXT = [\n  'VIM LICENSE',\n  '',\n  {\n    indent: '   ',\n    prefix: 'I) ',\n    text: (project) => `\n    There are no restrictions on distributing unmodified copies of ${project} except\n    that they must include this license text.  You can also distribute\n    unmodified parts of ${project}, likewise unrestricted except that they must\n    include this license text.  You are also allowed to include executables\n    that you made from the unmodified ${project} sources, plus your own usage\n    examples and Vim scripts.\n    `\n  },\n  '',\n  {\n    indent: '   ',\n    prefix: 'II)',\n    text: (project) => `\n    It is allowed to distribute a modified (or extended) version of ${project},\n    including executables and/or source code, when the following four\n    conditions are met:\n    `\n  },\n  {\n    indent: '      ',\n    prefix: '    1)',\n    text: (project) => `\n    This license text must be included unmodified.\n    `\n  },\n  {\n    indent: '      ',\n    prefix: '    2)',\n    text: (project) => `\n    The modified ${project} must be distributed in one of the following five ways:\n    `\n  },\n  {\n    indent: '         ',\n    prefix: '       a)',\n    text: (project) => `\n    If you make changes to ${project} yourself, you must clearly describe in\n    the distribution how to contact you.  When the maintainer asks you\n    (in any way) for a copy of the modified ${project} you distributed, you\n    must make your changes, including source code, available to the\n    maintainer without fee.  The maintainer reserves the right to\n    include your changes in the official version of ${project}.  What the\n    maintainer will do with your changes and under what license they\n    will be distributed is negotiable.  If there has been no negotiation\n    then this license, or a later version, also applies to your changes.\n    The current maintainer is Bram Moolenaar <Bram@vim.org>.  If this\n    changes it will be announced in appropriate places (most likely\n    vim.sf.net, www.vim.org and/or comp.editors). When it is completely\n    impossible to contact the maintainer, the obligation to send him\n    your changes ceases.  Once the maintainer has confirmed that he has\n    received your changes they will not have to be sent again.\n    `\n  },\n  {\n    indent: '         ',\n    prefix: '       b)',\n    text: (project) => `\n    If you have received a modified ${project} that was distributed as\n    mentioned under a) you are allowed to further distribute it\n    unmodified, as mentioned at I).  If you make additional changes the\n    text under a) applies to those changes.\n    `\n  },\n  {\n    indent: '         ',\n    prefix: '       c)',\n    text: (project) => `\n    Provide all the changes, including source code, with every copy of\n    the modified ${project} you distribute.  This may be done in the form of a\n    context diff.  You can choose what license to use for new code you\n    add.  The changes and their license must not restrict others from\n    making their own changes to the official version of ${project}.\n    `\n  },\n  {\n    indent: '         ',\n    prefix: '       d)',\n    text: (project) => `\n    When you have a modified ${project} which includes changes as mentioned\n    under c), you can distribute it without the source code for the\n    changes if the following three conditions are met:\n    `\n  },\n  {\n    indent: '           ',\n    prefix: '          -',\n    text: (project) => `\n    The license that applies to the changes permits you to distribute\n    the changes to the Vim maintainer without fee or restriction, and\n    permits the Vim maintainer to include the changes in the official\n    version of ${project} without fee or restriction.\n    `\n  },\n  {\n    indent: '           ',\n    prefix: '          -',\n    text: (project) => `\n    You keep the changes for at least three years after last\n    distributing the corresponding modified ${project}.  When the maintainer\n    or someone who you distributed the modified ${project} to asks you (in\n    any way) for the changes within this period, you must make them\n    available to him.\n    `\n  },\n  {\n    indent: '           ',\n    prefix: '          -',\n    text: (project) => `\n    You clearly describe in the distribution how to contact you.  This\n    contact information must remain valid for at least three years\n    after last distributing the corresponding modified ${project}, or as long\n    as possible.\n    `\n  },\n  {\n    indent: '         ',\n    prefix: '       e)',\n    text: (project) => `\n    When the GNU General Public License (GPL) applies to the changes,\n    you can distribute the modified ${project} under the GNU GPL version 2 or\n    any later version.\n    `\n  },\n  {\n    indent: '      ',\n    prefix: '    3)',\n    text: (project) => `\n    A message must be added, at least in the output of the \":version\"\n    command and in the intro screen, such that the user of the modified ${project}\n    is able to see that it was modified.  When distributing as mentioned\n    under 2)e) adding the message is only required for as far as this does\n    not conflict with the license used for the changes.\n    `\n  },\n  {\n    indent: '      ',\n    prefix: '    4)',\n    text: (project) => `\n    The contact information as required under 2)a) and 2)d) must not be\n    removed or changed, except that the person himself can make\n    corrections.\n    `\n  },\n  '',\n  {\n    indent: '    ',\n    prefix: 'III)',\n    text: (project) => `\n    If you distribute a modified version of ${project}, you are encouraged to use\n    the Vim license for your changes and make them available to the\n    maintainer, including the source code.  The preferred way to do this is\n    by e-mail or by uploading the files to a server and e-mailing the URL.\n    If the number of changes is small (e.g., a modified Makefile) e-mailing a\n    context diff will do.  The e-mail address to be used is\n    <maintainer@vim.org>\n    `\n  },\n  '',\n  {\n    indent: '    ',\n    prefix: 'IV) ',\n    text: (project) => `\n    It is not allowed to remove this license from the distribution of the ${project}\n    sources, parts of it or from a modified version.  You may use this\n    license for previous ${project} releases instead of the license that they came\n    with, at your option.\n    `\n  },\n  '',\n];\n\nconst gen = (project) => TEXT.map(part => {\n  if (typeof part === 'string') {\n    return part;\n  }\n\n  const p = part.text(project).trim();\n  const words = p.replace(/\\n\\s+/g, ' ').split(/\\s/g);\n\n  const lines = [part.prefix];\n  let row = 0;\n\n  words.forEach(word => {\n    if (lines[row].length + word.length + 1 <= LENGTH) {\n      lines[row] = `${lines[row]} ${word}`;\n    } else {\n      row = row + 1;\n      lines[row] = `${part.indent} ${word}`;\n    }\n  });\n\n  return lines.join('\\n');\n}).join('\\n');\n\nexport default gen;\n","<script>\n\nimport license from './license';\n\nconst createFileURL = string => window.URL.createObjectURL(new Blob([string], {type: 'text/plain'}));\n\nlet project = (function () {\n\tconst found = document.location.search.split(/[?&]/).map(pair => {\n\t\treturn pair.split('=');\n\t}).find(entry => {\n\t\treturn entry[0] === 'project';\n\t});\n\n\tif (found) {\n\t\treturn decodeURIComponent(found[1]);\n\t}\n})() || 'Vim';\n\n$: licenseText = license(project);\n$: blobURL = createFileURL(licenseText);\n\nconst copy = () => {\n  document.querySelector(\"#license-text\").select();\n  document.execCommand(\"copy\");\n};\n\n</script>\n\n<style>\n\nmain, footer {\n\tmargin: 0 auto;\n\twidth: 90%;\n\tmax-width: 800px;\n}\n\nh1 {\n\tcolor: #007f00;\n}\n\nfooter {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tmargin: 2em auto 2em;\n}\n\nfooter a,\nfooter a:hover,\nfooter a:visited {\n\tmargin: 0 48px;\n\twidth: 6em;\n\tcolor: #333;\n\ttext-align: center;\n\ttext-decoration: none;\n\tfont-weight: 500;\n}\n\nfooter a:hover {\n\ttext-decoration: underline;\n}\n\n#license-text {\n  opacity: 0;\n  width: 1px;\n  height: 1px;\n  color: transparent;\n}\n\n#license-preview {\n\tmargin: 2em auto;\n\tborder: 1px solid #666;\n\tborder-radius: 2px;\n\tpadding: 2em 1em;\n  overflow-x: auto;\n\tbackground-color: #fff;\n}\n\n#inputs {\n\tmargin: 2em auto;\n\tborder: 1px solid #666;\n\tborder-radius: 2px;\n\tpadding: 1em 1.5em 0.5em;\n\tbackground-color: #fff;\n}\n\nfieldset {\n\tborder: none;\n\tmargin: 1em 0;\n\tpadding: 0;\n}\n\nfieldset label {\n\tmargin-bottom: 6px;\n}\n\nfieldset input {\n\twidth: 80%;\n}\n\nfieldset input:invalid {\n  border-color: red;\n}\n\n#buttons {\n\tmargin: 2em auto 1em;\n}\n\n#buttons .button {\n\tposition: relative;\n\tborder: 1px solid #666;\n\tborder-radius: 4px;\n\tpadding: 6px 24px;\n\tcolor: #000;\n\tbackground: #fff;\n}\n#buttons .button:hover {\n\ttext-decoration: none;\n\tbox-shadow: 1px 2px 1px rgba(0, 0, 0, 0.5);\n}\n#buttons .button:active {\n\ttop: 2px;\n\tleft: 1px;\n\tbox-shadow: none;\n}\n\n</style>\n\n<main>\n\n<h1>Vim License</h1>\n\n<p>A web app to help generate Vim License text for your project.</p>\n\n<div id=\"inputs\">\n  <fieldset>\n  <label for=\"project\">Project Name</label>\n  <input id=\"project\" bind:value={project} required />\n  </fieldset>\n</div>\n\n<div id=\"buttons\">\n  <button id=\"copy-license\" on:click={copy} class=\"button\">Copy</button>\n  <textarea id=\"license-text\" readonly>{licenseText}</textarea>\n\t<a href={blobURL} download=\"LICENSE\" class=\"button\">Download</a>\n</div>\n\n<pre id=\"license-preview\">{licenseText}</pre>\n\n</main>\n\n<footer>\n\t<a href=\"https://github.com/othree/vim-license/blob/master/LICENSE\" target=\"_blank\">Vim License</a>\n\t<a href=\"https://github.com/othree/vim-license\" target=\"_blank\">GitHub</a>\n</footer>\n","import App from './App.svelte';\n\nvar app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","current_component","set_current_component","component","dirty_components","resolved_promise","Promise","resolve","update_scheduled","binding_callbacks","render_callbacks","flush_callbacks","add_render_callback","push","flush","seen_callbacks","Set","length","shift","update","$$","callback","pop","has","add","fragment","dirty","before_render","p","ctx","after_render","make_dirty","key","then","init","instance","create_fragment","not_equal$$1","prop_names","parent_component","props","not_equal","bound","on_mount","on_destroy","context","Map","callbacks","ready","value","hydrate","l","Array","from","childNodes","c","intro","i","m","new_on_destroy","map","filter","mount_component","SvelteComponent","[object Object]","detaching","this","d","$destroy","type","index","indexOf","splice","TEXT","indent","prefix","project","gen","part","words","trim","replace","split","lines","row","word","join","licenseText","blobURL","copy","found","location","search","pair","find","entry","decodeURIComponent","license","string","window","URL","createObjectURL","Blob","createFileURL","querySelector","select","execCommand","body"],"mappings":"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"}